{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stempNumber","slice","setState","concat","step","console","log","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"iPAsBA,SAASA,EAAOC,GACd,OACA,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,OAKX,SAASC,EAAgBC,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAGN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACnE,OAAON,EAAQI,GAGnB,OAAO,K,IAGHG,E,2KAoBSL,GAAI,IAAD,OACd,OAAO,kBAACR,EAAD,CACPI,MAAOU,KAAKb,MAAMK,QAAQE,GAC1BL,QAAU,WAAO,EAAKF,MAAME,QAAQK,Q,+BAKpC,OACE,6BACE,yBAAKN,UAAU,aACZY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKb,UAAU,aACZY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKb,UAAU,aACZY,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA3CTC,IAAMC,WAkDpBC,E,kDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,QAAS,CAAC,CACRd,QAASe,MAAM,GAAGC,KAAK,QAEzBC,SAAS,EACTC,YAAY,GAPG,E,wDAUPhB,GAEV,IAAMY,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAGX,KAAKK,MAAMK,YAAc,GAE/DlB,EADUc,EAAQA,EAAQX,OAAQ,GAChBH,QAAQmB,QAC7BpB,EAAgBC,IAAYA,EAAQE,KAGvCF,EAAQE,GAAKM,KAAKK,MAAMI,QAAU,SAAM,SACxCT,KAAKY,SAAS,CACZN,QAASA,EAAQO,OAAO,CAAC,CACvBrB,QAASA,KAEXiB,SAAUT,KAAKK,MAAMI,QACrBC,YAAaJ,EAAQX,Y,6BAIlBmB,GACLC,QAAQC,IAAIF,GACD,GAARA,EAUHd,KAAKY,SAAS,CACZF,YAAaI,EACbL,QAASK,EAAO,IAAM,IAXtBd,KAAKY,SAAS,CACZN,QAAS,CAAC,CACRd,QAASe,MAAM,GAAGC,KAAK,QAEzBC,SAAS,EACTC,YAAY,M,+BAUR,IAiBJO,EAjBG,OACDX,EAAUN,KAAKK,MAAMC,QACrBY,EAAUZ,EAAQN,KAAKK,MAAMK,aAC7BS,EAAS5B,EAAgB2B,EAAQ1B,SAEjC4B,EAAQd,EAAQe,KAAI,SAACP,EAAMQ,GAC/B,IAAMC,EAAOD,EAAI,4BACXA,EADW,+BAIjB,OACE,wBAAIE,IAAKF,GACP,4BAAQjC,QAAS,WAAO,EAAKoC,OAAOH,KAASC,OAYnD,OALEN,EADCE,EACK,8BAAWA,GAEX,kCAAUnB,KAAKK,MAAMI,QAAU,SAAM,UAI3C,yBAAKrB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACW,EAAD,CACEP,QAAW0B,EAAQ1B,QACnBH,QAAW,SAAAK,GAAM,EAAKgC,YAAYhC,OAGtC,yBAAKN,UAAU,aACb,6BAAO6B,GACP,4BAAKG,S,GAjFIlB,IAAMC,WAyFzBwB,IAASC,OACP,kBAACxB,EAAD,MACAyB,SAASC,eAAe,W","file":"static/js/main.d2e36f10.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n/* class Square extends React.Component {\r\n  //  constructor(props) {\r\n  //   super(props)\r\n  //   this.state = {\r\n  //     value: null\r\n  //   }\r\n  // } \r\n  render() {\r\n    return (\r\n      <button \r\n        className=\"square\" \r\n        onClick={() => { this.props.onClick() }}\r\n      >\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n} */\r\nfunction Square(props) {\r\n  return (\r\n  <button className=\"square\" onClick={props.onClick}>\r\n    {props.value}\r\n    </button>\r\n  )\r\n\r\n}\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a]\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nclass Board extends React.Component {\r\n  /* constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true\r\n    }\r\n  } */\r\n  // handleClick(i) {\r\n  //   // 不可变性以及不可变性的重要性\r\n  //   const  squares = this.state.squares.slice()\r\n  //   if(calculateWinner(squares) || squares[i]) {\r\n  //     return\r\n  //   }\r\n  //   squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n  //   this.setState({\r\n  //     squares: squares,\r\n  //     xIsNext: !this.state.xIsNext\r\n  //   })\r\n  // }\r\n  renderSquare(i) {\r\n    return <Square \r\n    value={this.props.squares[i]}\r\n    onClick={ () => {this.props.onClick(i)}}\r\n    />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null)\r\n      }],\r\n      xIsNext: true,\r\n      stempNumber:0,\r\n    }\r\n  }\r\n  handleClick(i) {\r\n    // 不可变性以及不可变性的重要性\r\n    const history = this.state.history.slice(0, this.state.stempNumber + 1)\r\n    const current = history[history.length -1]\r\n    const squares = current.squares.slice()\r\n    if(calculateWinner(squares) || squares[i]) {\r\n      return\r\n    }\r\n    squares[i] = this.state.xIsNext ? '黑' : '白'\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares\r\n      }]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stempNumber: history.length\r\n    })\r\n  }\r\n\r\n  jumpTo(step) {\r\n    console.log(step)\r\n    if(step == 0) {\r\n      this.setState({\r\n        history: [{\r\n          squares: Array(9).fill(null)\r\n        }],\r\n        xIsNext: true,\r\n        stempNumber:0,\r\n      })\r\n      return\r\n    }\r\n    this.setState({\r\n      stempNumber: step,\r\n      xIsNext: step % 2 === 0\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history\r\n    const current = history[this.state.stempNumber]\r\n    const winner = calculateWinner(current.squares)\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? \r\n      `跳回第${move}步`:\r\n      `初始化`\r\n\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => {this.jumpTo(move)}}>{desc}</button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    let status\r\n    if(winner) {\r\n      status = `获胜者: ${winner}`\r\n    }else {\r\n      status = `下一位：${this.state.xIsNext ? '黑' : '白'}`\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares = {current.squares}\r\n            onClick = {i => {this.handleClick(i)}}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{ status }</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}